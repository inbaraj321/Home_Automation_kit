#include <WiFi.h>
#include <Preferences.h>
#include <HTTPClient.h>
#include <WebServer.h>

//blynk library
#define BLYNK_PRINT Serial
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
Preferences preferences;
//ap
int i = 0;
int statusCode;
//const char* ssid = "Default SSID";
//const char* passphrase = "Default passord";
//String st;
String scanConcatValue;
String content;
String esid;
String epass = "";
//Establishing Local server at port 80
WebServer server(80);

//wifi scanning value
String ssids_array[50];
String network_string;
String connected_string;
int wifi_setup_pin = 15;
bool wifi_status = false;
bool ap_status = false;

const char* pref_ssid = "";
const char* pref_pass = "";
const char* auth_code = "";
String client_wifi_ssid;
String client_wifi_password;
String client_auth_code;

long start_wifi_millis;
long wifi_timeout = 10000;

enum wifi_setup_stages { NONE, SCAN_START, SCAN_RESTART, SCAN_COMPLETE,
                         SSID_ENTERED,WAIT_PASS, PASS_ENTERED, WAIT_CONNECT,
                         LOGIN_FAILED };
enum wifi_setup_stages wifi_stage = NONE;

BlynkTimer timer1;
void checkPhysicalButton();

//light 1
int relay1State = LOW;
int pushButton1State = LOW;
#define RELAY_PIN_1      26   
#define PUSH_BUTTON_1    13   
#define VPIN_BUTTON_1    V13

//light 2
int relay2State = LOW;
int pushButton2State = LOW;
#define RELAY_PIN_2      32   
#define PUSH_BUTTON_2    12   
#define VPIN_BUTTON_2    V12

//light 3
int relay3State = LOW;
int pushButton3State = LOW;
#define RELAY_PIN_3      27   
#define PUSH_BUTTON_3    33   
#define VPIN_BUTTON_3    V33

//Ac Switch
int relay4State = LOW;
int pushButton4State = LOW;
#define RELAY_PIN_4      5   
#define PUSH_BUTTON_4    34   
#define VPIN_BUTTON_4    V34

// temp sensor configuration
#define TEM_INC 19
#define TEM_DEC 18
#define TEM_SETUP_PIN 21
int temSetupStatus = LOW;

//For Temperature sensor and display
#include <TM1637Display.h>
#include <OneWire.h>
#include <DallasTemperature.h> 
#define ONE_WIRE_BUS 25
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
float roomTemperature = 40;
#define VPIN_BUTTON_5    V14

#define VPIN_BUTTON_6    V15
const int CLK = 22; //Set the CLK pin connection to the display
const int DIO = 23; //Set the DIO pin connection to the display
TM1637Display display(CLK, DIO); //set up the 4-Digit Display.



bool temSetupPin = false;
bool acSetupPin = false;
bool acAutoMode = false;
int acSetupIncTem = 30;
int acSetupDecTem = 30;
bool acSetupIncPin = false;
bool acSetupDecPin = false;
int acIncRange = 1;
int acDecRange = 1;
// ac mode change
long buttonTimer = 0;
long longPressTime = 1000;
boolean buttonActive = false;
boolean longPressActive = false;

// IR Header
#include "IRrecv.h"

int RECIVING_PIN = 14;
IRrecv irrecv(RECIVING_PIN);
decode_results results;
int irVal = 0;
const int irRelay1 = 33444015;
const int irRelay2 = 33478695;
const int irRelay3 = 33486855;
const int irRelay4 = 33435855;




void sendTemperatures(){
  if(!temSetupPin){
    sensors.requestTemperatures();                  
    roomTemperature = sensors.getTempCByIndex(0);   
    Serial.println(roomTemperature);
    Blynk.virtualWrite(VPIN_BUTTON_5, roomTemperature);
    //display.showNumberDec(roomTemperature);
    display.showNumberDecEx(roomTemperature*10, 0b00100000  , false, 4, 0);
    if(acAutoMode){
      if(roomTemperature > acSetupIncTem){
        if (relay4State == LOW) {
          relay4State = HIGH;
          digitalWrite(RELAY_PIN_4, relay4State);
          // Update Button Widget
          Blynk.virtualWrite(VPIN_BUTTON_4, relay4State);
          Serial.println("AC ON");
          digitalWrite(TEM_SETUP_PIN, relay4State);
        }
      }else if(roomTemperature < acSetupDecTem){
        if (relay4State == HIGH) {
          relay4State = LOW;
          digitalWrite(RELAY_PIN_4, relay4State);
          // Update Button Widget
          Blynk.virtualWrite(VPIN_BUTTON_4, relay4State);
          Serial.println("AC OFF");
          digitalWrite(TEM_SETUP_PIN, relay4State);
        }
      }
    }
  }
}

BLYNK_CONNECTED() {
  Blynk.syncVirtual(VPIN_BUTTON_1);
  Blynk.syncVirtual(VPIN_BUTTON_2);
  Blynk.syncVirtual(VPIN_BUTTON_3);
  Blynk.syncVirtual(VPIN_BUTTON_4);
}
BLYNK_WRITE(VPIN_BUTTON_1) {
  relay1State = param.asInt();
  digitalWrite(RELAY_PIN_1, relay1State);
}
BLYNK_WRITE(VPIN_BUTTON_2) {
  relay2State = param.asInt();
  digitalWrite(RELAY_PIN_2, relay2State);
}
BLYNK_WRITE(VPIN_BUTTON_3) {
  relay3State = param.asInt();
  digitalWrite(RELAY_PIN_3, relay3State);
}
BLYNK_WRITE(VPIN_BUTTON_4) {
  relay4State = param.asInt();
  digitalWrite(RELAY_PIN_4, relay4State);
}
void blynkTemStatusLed(){
  temSetupStatus = !temSetupStatus;
  digitalWrite(TEM_SETUP_PIN, temSetupStatus);
}
void checkPhysicalButton(){
  //light 1
  if (digitalRead(PUSH_BUTTON_1) == HIGH) {
    if (pushButton1State != LOW) {
      relay1State = !relay1State;
      digitalWrite(RELAY_PIN_1, relay1State);
      // Update Button Widget
      Blynk.virtualWrite(VPIN_BUTTON_1, relay1State);
    }
    pushButton1State = LOW;
  }else 
    pushButton1State = HIGH;
  //light 2
  if (digitalRead(PUSH_BUTTON_2) == HIGH) {
    if (pushButton2State != LOW) {
      relay2State = !relay2State;
      digitalWrite(RELAY_PIN_2, relay2State);
      // Update Button Widget
      Blynk.virtualWrite(VPIN_BUTTON_2, relay2State);
    }
    pushButton2State = LOW;
  }else 
    pushButton2State = HIGH;
  
  //light 3
  if (digitalRead(PUSH_BUTTON_3) == HIGH) {
    if (pushButton3State != LOW) {
      relay3State = !relay3State;
      digitalWrite(RELAY_PIN_3, relay3State);
      // Update Button Widget
      Blynk.virtualWrite(VPIN_BUTTON_3, relay3State);
    }
    pushButton3State = LOW;
  }else 
    pushButton3State = HIGH;
    //light 4
  if (digitalRead(PUSH_BUTTON_4) == HIGH) {
    if (buttonActive == false) {
      Serial.println("Mode 1");
      buttonActive = true;
      buttonTimer = millis();
    }
    if ((millis() - buttonTimer > longPressTime) && (longPressActive == false)) {
      Serial.println("Mode 2");
      longPressActive = true;
      Serial.println("longPressActive true");
      Serial.println("LED1State change");
      //led blynk
      blynkTemStatusLed();
      acAutoMode = true;
      acSetupPin = true;
    }
  } else {
    if (buttonActive == true) {
      if (longPressActive == true) {
        Serial.print(" 2 Activated");
        longPressActive = false;
        blynkTemStatusLed();
      } else {
        Serial.println(" 1 Activated");
        relay4State = !relay4State;
        Serial.println("AC Toggle");
        digitalWrite(RELAY_PIN_4, relay4State);
        digitalWrite(TEM_SETUP_PIN, relay4State);
        Blynk.virtualWrite(VPIN_BUTTON_4, relay4State);
        acSetupPin = false;  
        acAutoMode = false;
        acSetupIncPin = false;
        acSetupDecPin = false;
      }
     buttonActive = false;
    }
  }
  if(acAutoMode){
    blynkTemStatusLed();
  }
  
  
  // temp increment switch
  if (digitalRead(TEM_INC) == HIGH && !acSetupDecPin && acSetupPin) {
    acSetupIncPin = true;
    acSetupDecPin = false;
  if(acSetupIncPin && acSetupPin && (digitalRead(TEM_INC) == HIGH || digitalRead(TEM_DEC) == HIGH)){
    Serial.println("temperature inc setup start");
    temSetupPin = true;
    
    delay(1000);
    Blynk.virtualWrite(VPIN_BUTTON_6, acSetupIncTem);
    //display.showNumberDec(acSetupTem);
    display.showNumberDecEx(acSetupIncTem*10, 0b00100000  , false, 4, 0);
    
    Serial.println(acSetupIncTem);
    for(int i=0;i<25;i++){
      if(digitalRead(TEM_INC) == HIGH){
        acSetupIncTem = acSetupIncTem + 1 ;
        Blynk.virtualWrite(VPIN_BUTTON_6, acSetupIncTem);
        //display.showNumberDec(acSetupTem);
        display.showNumberDecEx(acSetupIncTem*10, 0b00100000  , false, 4, 0);
        Serial.println(acSetupIncTem);
        i=0;
        blynkTemStatusLed();
        delay(500);
      }else if(digitalRead(TEM_DEC) == HIGH){
        acSetupIncTem = acSetupIncTem - 1 ;
        Blynk.virtualWrite(VPIN_BUTTON_6, acSetupIncTem);
        //display.showNumberDec(acSetupTem);
        display.showNumberDecEx(acSetupIncTem*10, 0b00100000  , false, 4, 0);
    
        Serial.println(acSetupIncTem);
        i=0;
        blynkTemStatusLed();
        delay(500);
        
      }
      Serial.println(i);
      delay(500);
    }
    temSetupPin = false;
    acSetupIncPin = false;
    acSetupDecPin = false;
    acAutoMode = true;
  }
  }
  // temp decrement switch
  if (digitalRead(TEM_DEC) == HIGH && !acSetupIncPin && acSetupPin) {
    acSetupDecPin = true;
    acSetupIncPin = false;
  if(acSetupDecPin && (digitalRead(TEM_INC) == HIGH || digitalRead(TEM_DEC) == HIGH)){
    Serial.println("temperature dec setup start");
    temSetupPin = true;
    acSetupDecPin = true;
    delay(1000);
    Blynk.virtualWrite(VPIN_BUTTON_6, acSetupDecTem);
    //display.showNumberDec(acSetupTem);
    display.showNumberDecEx(acSetupDecTem*10, 0b00100000  , false, 4, 0);
    
    Serial.println(acSetupDecTem);
    for(int i=0;i<25;i++){
      if(digitalRead(TEM_INC) == HIGH){
        acSetupDecTem = acSetupDecTem + 1 ;
        Blynk.virtualWrite(VPIN_BUTTON_6, acSetupDecTem);
        //display.showNumberDec(acSetupTem);
        display.showNumberDecEx(acSetupDecTem*10, 0b00100000  , false, 4, 0);
        Serial.println(acSetupDecTem);
        i=0;
        delay(500);
      }else if(digitalRead(TEM_DEC) == HIGH){
        acSetupDecTem = acSetupDecTem - 1 ;
        Blynk.virtualWrite(VPIN_BUTTON_6, acSetupDecTem);
        //display.showNumberDec(acSetupTem);
        display.showNumberDecEx(acSetupDecTem*10, 0b00100000  , false, 4, 0);
    
        Serial.println(acSetupDecTem);
        i=0;
        delay(500);
      }
      Serial.println(i);
      delay(500);
    }
    temSetupPin = false;
    acSetupIncPin = false;
    acSetupDecPin = false;
    acAutoMode = true;
  }
  }
}

// IR function
void receivingMethod(){
 if (irrecv.decode(&results)) {
    irVal = results.value;
    Serial.println(irVal);
    switch(irVal){
      case irRelay1 :
        Serial.println("Light 1 toggle");
        relay1State = !relay1State;
        digitalWrite(RELAY_PIN_1, relay1State);
        Blynk.virtualWrite(VPIN_BUTTON_1, relay1State);
        break;
      case irRelay2 :
        Serial.println("Light 2 toggle");
        relay2State = !relay2State;
        digitalWrite(RELAY_PIN_2, relay2State);
        Blynk.virtualWrite(VPIN_BUTTON_2, relay2State);
        break;
      case irRelay3 :
        Serial.println("Light 3 toggle");
        relay3State = !relay3State;
        digitalWrite(RELAY_PIN_3, relay3State);
        Blynk.virtualWrite(VPIN_BUTTON_3, relay3State);
        break;
      case irRelay4 :
        Serial.println("Light 4 toggle");
        relay4State = !relay4State;
        digitalWrite(RELAY_PIN_4, relay4State);
        Blynk.virtualWrite(VPIN_BUTTON_4, relay4State);
        break;
      default :
        Serial.println("Not declared");
    }
    irrecv.resume();
  }  
}

void createWebServer(){
  {
    //http://192.168.4.1/
    server.on("/", []() {
      IPAddress ip = WiFi.softAPIP();
      String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
      content = "<!DOCTYPE HTML>\r\n<html>Welcome to Wifi Credentials Update page";
      //content += "<form action=\"/scan\" method=\"POST\"><input type=\"submit\" value=\"scan\"></form>";
      //content += ipStr;
      content += "<p>";
      content += ipStr;
      content += "</p><form method='get' action='setting'>";
      content += "<label>SSID: </label><input name='ssid' length=32><br>";
      content += "<label>PASSWORD: </label><input name='pass' length=64><br>";
      content += "<label>BLYNK KEY: </label><input name='authKey' length=64><br>";
      content += "<input type='submit'></form>";
      content += "</html>";
      server.send(200, "text/html", content);
    });
    //http://192.168.4.1/setting?ssid=&pass=
    server.on("/setting", []() {
      String qsid = server.arg("ssid");
      String qpass = server.arg("pass");
      String authKey = server.arg("authKey");
      //Serial.println(ssids_array[authKey]);
      preferences.putString("pref_ssid", server.arg("ssid"));
      preferences.putString("pref_pass", server.arg("pass"));
      preferences.putString("auth_code", server.arg("authKey"));
      if (qsid.length() > 0 && qpass.length() > 0) {
        Serial.println(qsid);
        Serial.println("");
        Serial.println(qpass);
        Serial.println("");

        content = "{\"Success\":\"saved to eeprom... reset to boot into new wifi\"}";
        statusCode = 200;
        ESP.restart();
      } else {
        content = "{\"Error\":\"404 not found\"}";
        statusCode = 404;
        Serial.println("Sending 404");
      }
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(statusCode, "application/json", content);
    });
  }
}

//start the web
void launchWeb(){
  Serial.print("Local IP: ");
  Serial.println(WiFi.localIP());
  Serial.print("SoftAP IP: ");
  Serial.println(WiFi.softAPIP());
  createWebServer();
  // Start the server
  server.begin();
  Serial.println("Server started");
}

//start the access point mode
void startAp(){
  WiFi.disconnect();
  Serial.println("Access point enabled with no password");
  WiFi.mode(WIFI_AP);
  WiFi.softAP("ESP32", "");
  ap_status = true;
  launchWeb();
  Serial.println("over");
}

//scan the available wifi network
void scanWifiNetworks(){
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if (n == 0)
    Serial.println("no networks found");
  else{
    Serial.print(n);
    Serial.println(" networks found");
    scanConcatValue = "<ol>";
    for (int i = 0; i < n; ++i){ 
      scanConcatValue += "<li>";
      ssids_array[i + 1] = WiFi.SSID(i);
      scanConcatValue += ssids_array[i + 1];
      scanConcatValue += "</li>";
      delay(10);
    }
  }
  Serial.println(scanConcatValue);
  delay(100);
}

bool checkWifiStatus(){
  if(WiFi.status() != WL_CONNECTED) {
    delay(500);
    digitalWrite(wifi_setup_pin, LOW);
    //Serial.println("");
    //Serial.println("Connect timed out, opening AP");
    return false;
  }
  return true;
}

//flush the saved data
void eraseSavedData(){
  preferences.putString("pref_ssid", "--");
  preferences.putString("pref_pass", "--");    
}

//initialise the wifi
bool initWifi(){
  String temp_pref_ssid = preferences.getString("pref_ssid");
  String temp_pref_pass = preferences.getString("pref_pass");
  pref_ssid = temp_pref_ssid.c_str();
  pref_pass = temp_pref_pass.c_str();
  Serial.println(pref_ssid);
  Serial.println(pref_pass);
  WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE);
  start_wifi_millis = millis();
  WiFi.begin(pref_ssid, pref_pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (millis() - start_wifi_millis > wifi_timeout) {
      WiFi.disconnect(true, true);
      digitalWrite(wifi_setup_pin, LOW);
      return false;
    }
  }
  digitalWrite(wifi_setup_pin, HIGH);
  wifi_status = true;
  return true;
}
//one time setup
void setup() {
  Serial.println("Started");
  //initialised the port
  Serial.begin(9600);
  //set the diplay to maximum brightness
  display.setBrightness(0x0a);
  sensors.begin();     
  sensors.setResolution(10);
  sensors.requestTemperatures();                  
  roomTemperature = sensors.getTempCByIndex(0);   
  display.showNumberDecEx(roomTemperature*10, 0b00100000  , false, 4, 0);
  
  //wifi initalised
  preferences.begin("wifi_access", false);
  //eraseSavedData();
  //initialised the wifi setup led pin
  pinMode(wifi_setup_pin, OUTPUT);
 
  if (!initWifi()) {  // Connect to Wi-Fi fails
    //AP initialised
    Serial.println("Connection Status Negative / D14 HIGH");
    Serial.println("Turning the HotSpot On");
    //launchWeb();
    scanWifiNetworks();// Setup HotSpot
    startAp();
    
  } else {
    Serial.println("Wifi established");
    Serial.println(WiFi.localIP());
    char auth[] = "xz1PAOqPTTgsJR1a5qm05kl1qS6e3_Oo";
    //char ssid[] = preferences.getString("pref_ssid").toCharArray();
    //char pass[] = "password";
    // username or ssid
    String str = preferences.getString("pref_ssid"); 
    int str_len = str.length() + 1;  
    char ssid[str_len];
    str.toCharArray(ssid, str_len);
    
    //password
    str = preferences.getString("pref_pass"); 
    str_len = str.length() + 1;  
    char pass[str_len];
    str.toCharArray(pass, str_len);
    
    Blynk.begin(auth, ssid, pass);
    //light on/off button
  
  }
  pinMode(RELAY_PIN_1, OUTPUT);
  pinMode(PUSH_BUTTON_1, INPUT_PULLUP);
  pinMode(RELAY_PIN_2, OUTPUT);
  pinMode(PUSH_BUTTON_2, INPUT_PULLUP);
  pinMode(RELAY_PIN_3, OUTPUT);
  pinMode(PUSH_BUTTON_3, INPUT_PULLUP);
  pinMode(RELAY_PIN_4, OUTPUT);
  pinMode(PUSH_BUTTON_4, INPUT_PULLUP);
  
  pinMode(TEM_SETUP_PIN, OUTPUT);

  
  
  timer1.setInterval(100L, checkPhysicalButton);
  timer1.setInterval(5000L, sendTemperatures);
  
  //IR setup
  pinMode(RECIVING_PIN, INPUT_PULLUP);
  irrecv.enableIRIn(); // Start the receiver
  timer1.setInterval(100L, receivingMethod);
 // initPCIInterruptForTinyReceiver();
}
//continuose loop
void loop() {
  if(wifi_status){
    if(Blynk.connected()== 1){
      Blynk.run();
      timer1.run();
      //receivingRfSignal();
    }else{
      Serial.println("Wifi disconnected /Blynk server error");
      Serial.println("Recheck wifi 5 times ,interval of 5 minutes");
      if (!initWifi()) {  // Connect to Wi-Fi fails
        wifi_status = false;
        Serial.println("Connection not established");
        Serial.println("Before Restart esp32,Check Wifi or Blynk");
        delay(1000);
      }
    }
  }else{
    
    while ((WiFi.status() != WL_CONNECTED)){
      delay(100);
      server.handleClient();
      timer1.run();
      //receivingMethod();
    }
  }
  //delay(1000);
}